// lib/models/message_model.dart

import 'package:hive/hive.dart';
import 'user_model.dart';
import 'reaction_model.dart';

part 'message_model.g.dart'; // This file will be generated by the build runner

@HiveType(typeId: 1) // Unique ID for the Message Hive object
class Message extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String conversationId;

  @HiveField(2)
  final User? sender;

  @HiveField(3)
  final String content;

  @HiveField(4)
  final String? fileUrl;

  @HiveField(5)
  final String? fileType;

  @HiveField(6)
  final String? fileName;

  @HiveField(7)
  final String? replyTo;

  @HiveField(8)
  final String? replySnippet;

  @HiveField(9)
  final String? replySenderName;

  @HiveField(10)
  final List<Reaction> reactions;

  @HiveField(11)
  final DateTime createdAt;

  @HiveField(12)
  final DateTime? deletedAt;

  @HiveField(13)
  final bool isEdited;

  @HiveField(14)
  final String messageType;

  @HiveField(15)
  String status;

  @HiveField(16)
  final bool isEncrypted;

  Message({
    required this.id,
    required this.conversationId,
    this.sender,
    required this.content,
    this.fileUrl,
    this.fileType,
    this.fileName,
    this.replyTo,
    this.replySnippet,
    this.replySenderName,
    required this.reactions,
    required this.createdAt,
    this.deletedAt,
    this.isEdited = false,
    this.messageType = 'text',
    this.status = 'sent',
    this.isEncrypted = false,
  });

  Message copyWith({
    String? id,
    String? conversationId,
    User? sender,
    String? content,
    String? fileUrl,
    String? fileType,
    String? fileName,
    String? replyTo,
    String? replySnippet,
    String? replySenderName,
    List<Reaction>? reactions,
    DateTime? createdAt,
    DateTime? deletedAt,
    bool? isEdited,
    String? messageType,
    String? status,
    bool? isEncrypted,
  }) {
    return Message(
      id: id ?? this.id,
      conversationId: conversationId ?? this.conversationId,
      sender: sender ?? this.sender,
      content: content ?? this.content,
      fileUrl: fileUrl ?? this.fileUrl,
      fileType: fileType ?? this.fileType,
      fileName: fileName ?? this.fileName,
      replyTo: replyTo ?? this.replyTo,
      replySnippet: replySnippet ?? this.replySnippet,
      replySenderName: replySenderName ?? this.replySenderName,
      reactions: reactions ?? this.reactions,
      createdAt: createdAt ?? this.createdAt,
      deletedAt: deletedAt ?? this.deletedAt,
      isEdited: isEdited ?? this.isEdited,
      messageType: messageType ?? this.messageType,
      status: status ?? this.status,
      isEncrypted: isEncrypted ?? this.isEncrypted,
    );
  }

  factory Message.fromJson(Map<String, dynamic> json) {
    return Message(
      id: json['_id'],
      conversationId: json['conversationId'],
      sender:
          json['sender'] != null && json['sender'] is Map
              ? User.fromJson(json['sender'])
              : null,
      content: json['content'] ?? '',
      fileUrl: json['fileUrl'],
      fileType: json['fileType'],
      fileName: json['fileName'],
      replyTo: json['replyTo'],
      replySnippet: json['replySnippet'],
      replySenderName: json['replySenderName'],
      reactions:
          (json['reactions'] as List<dynamic>?)
              ?.map((reaction) => Reaction.fromJson(reaction))
              .toList() ??
          [],
      createdAt: DateTime.parse(json['createdAt']).toLocal(),
      deletedAt:
          json['deletedAt'] != null
              ? DateTime.parse(json['deletedAt']).toLocal()
              : null,
      isEdited: json['isEdited'] ?? false,
      messageType: json['messageType'] ?? 'text',
      status: json['status'] ?? 'sent',
      isEncrypted: json['isEncrypted'] ?? false,
    );
  }
}
