// lib/models/conversation_model.dart
import 'package:hive/hive.dart';
import 'user_model.dart';
import 'message_model.dart';

part 'conversation_model.g.dart'; // This file will be generated by the build runner

@HiveType(typeId: 3) // Unique ID for the Conversation Hive object
class Conversation extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final List<User> participants;

  @HiveField(2)
  final bool isGroupChat;

  @HiveField(3)
  final String? groupName;

  @HiveField(4)
  final List<User>? groupAdmins;

  @HiveField(5)
  final String? groupPictureUrl;

  @HiveField(6)
  final Message? lastMessage;

  @HiveField(7)
  final DateTime createdAt;

  @HiveField(8)
  final DateTime updatedAt;

  @HiveField(9)
  int unreadCount;

  Conversation({
    required this.id,
    required this.participants,
    required this.isGroupChat,
    this.groupName,
    this.groupAdmins,
    this.groupPictureUrl,
    this.lastMessage,
    required this.createdAt,
    required this.updatedAt,
    this.unreadCount = 0,
  });

  Conversation copyWith({
    String? id,
    List<User>? participants,
    bool? isGroupChat,
    String? groupName,
    List<User>? groupAdmins,
    String? groupPictureUrl,
    Message? lastMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? unreadCount,
  }) {
    return Conversation(
      id: id ?? this.id,
      participants: participants ?? this.participants,
      isGroupChat: isGroupChat ?? this.isGroupChat,
      groupName: groupName ?? this.groupName,
      groupAdmins: groupAdmins ?? this.groupAdmins,
      groupPictureUrl: groupPictureUrl ?? this.groupPictureUrl,
      lastMessage: lastMessage ?? this.lastMessage,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      unreadCount: unreadCount ?? this.unreadCount,
    );
  }

  factory Conversation.fromJson(Map<String, dynamic> json) {
    var participantsList = <User>[];
    if (json['participants'] != null) {
      json['participants'].forEach((v) {
        participantsList.add(User.fromJson(v as Map<String, dynamic>));
      });
    }

    var groupAdminsList = <User>[];
    if (json['groupAdmins'] != null && json['groupAdmins'] is List) {
      json['groupAdmins'].forEach((v) {
        groupAdminsList.add(User.fromJson(v as Map<String, dynamic>));
      });
    }

    return Conversation(
      id: json['_id'] as String,
      participants: participantsList,
      isGroupChat: json['isGroupChat'] as bool? ?? false,
      groupName: json['groupName'] as String?,
      groupAdmins: groupAdminsList.isNotEmpty ? groupAdminsList : null,
      groupPictureUrl: json['groupPictureUrl'] as String?,
      lastMessage:
          json['lastMessage'] != null && json['lastMessage'] is Map
              ? Message.fromJson(json['lastMessage'] as Map<String, dynamic>)
              : null,
      createdAt: DateTime.parse(json['createdAt'] as String).toLocal(),
      updatedAt: DateTime.parse(json['updatedAt'] as String).toLocal(),
      unreadCount: json['unreadCount'] as int? ?? 0,
    );
  }

  User? getOtherParticipant(String currentUserId) {
    if (isGroupChat || participants.length < 2) return null;
    try {
      return participants.firstWhere((p) => p.id != currentUserId);
    } catch (e) {
      return null;
    }
  }
}
